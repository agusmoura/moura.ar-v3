---
description:
globs:
alwaysApply: true
---
# Est√°ndares del Proyecto Moura.ar v3

## üöÄ Tecnolog√≠as y Herramientas

Este proyecto utiliza:
- **Astro v5** como framework principal
- **Tailwind CSS v4** para estilos (con el nuevo sistema basado en CSS)
- **Bun** como runtime de JavaScript (NO usar npm, yarn o pnpm)
- **TypeScript** con configuraci√≥n estricta
- **ESLint v9** con flat config
- **Prettier** para formateo de c√≥digo
- **Husky v9** para Git hooks
- **Commitlint** para mensajes de commit convencionales

## üìã Reglas de Desarrollo

### 1. Runtime y Comandos
- **SIEMPRE** usar `bun` para instalar dependencias: `bun add` o `bun add -D`
- **SIEMPRE** usar `bunx` para ejecutar binarios: `bunx --bun astro dev`
- **NUNCA** usar `npm`, `yarn`, `pnpm` o `npx`

### 2. Imports y Path Aliases
Los siguientes path aliases est√°n configurados:
```typescript
import Component from '@/components/Component.astro';
import Layout from '@layouts/Layout.astro';
import { algo } from '@/utils/helper';
```

### 3. Estructura de Archivos
```
src/
‚îú‚îÄ‚îÄ assets/      # Im√°genes y recursos est√°ticos
‚îú‚îÄ‚îÄ components/  # Componentes reutilizables (.astro)
‚îú‚îÄ‚îÄ layouts/     # Layouts de p√°gina
‚îú‚îÄ‚îÄ pages/       # P√°ginas del sitio (routing)
‚îú‚îÄ‚îÄ styles/      # Archivos CSS globales
‚îî‚îÄ‚îÄ utils/       # Funciones helper y utilidades
```

### 4. Estilos con Tailwind CSS v4
- Usar el nuevo sistema de Tailwind v4 con `@import "tailwindcss"`
- NO crear archivo `tailwind.config.js` (no es necesario en v4)
- Preferir clases de utilidad sobre CSS personalizado
- Para temas personalizados, usar el sistema `@theme` en CSS

### 5. Componentes Astro
- Preferir componentes `.astro` sobre frameworks JS cuando sea posible
- Usar TypeScript en el frontmatter de Astro
- Props tipadas con interfaces:
```astro
---
interface Props {
  title: string;
  description?: string;
}

const { title, description } = Astro.props;
---
```

### 6. TypeScript
- Configuraci√≥n `strict` habilitada
- NO usar `any` - usar `unknown` si es necesario
- Tipar todas las funciones, props e interfaces
- Usar tipos de utilidad cuando sea apropiado

### 7. Commits Convencionales

**OBLIGATORIO** seguir el formato:
```
<tipo>(<alcance opcional>): <descripci√≥n>
```

Tipos permitidos:
- `feat`: Nueva funcionalidad
- `fix`: Correcci√≥n de bugs
- `docs`: Cambios en documentaci√≥n
- `style`: Cambios de formato
- `refactor`: Refactorizaci√≥n
- `perf`: Mejoras de rendimiento
- `test`: Tests
- `build`: Cambios en build/dependencias
- `ci`: Configuraci√≥n CI
- `chore`: Tareas de mantenimiento
- `revert`: Revertir cambios

Reglas:
- Mensaje en **min√∫sculas**
- **Sin punto final**
- **M√°ximo 72 caracteres**
- En espa√±ol o ingl√©s (consistente)

### 8. C√≥digo Limpio
- El c√≥digo debe pasar `bun run lint` sin errores
- Formatear con Prettier antes de commit (autom√°tico con Husky)
- No dejar `console.log` en producci√≥n
- Comentarios solo cuando sean necesarios y en espa√±ol

### 9. Performance
- Optimizar im√°genes con el componente `<Image>` de Astro
- Lazy loading para componentes pesados
- Minimizar JavaScript del cliente
- Preferir SSG sobre SSR cuando sea posible

### 10. SEO y Accesibilidad
- Todas las im√°genes deben tener `alt` descriptivo
- Usar etiquetas sem√°nticas HTML5
- Estructura de headings correcta (h1, h2, h3...)
- Meta tags en cada p√°gina

## üö´ NO HACER

1. **NO** usar `npm`, `yarn` o `pnpm`
2. **NO** commitear sin pasar los hooks
3. **NO** usar `var` - solo `const` y `let`
4. **NO** dejar c√≥digo comentado
5. **NO** usar `!important` en CSS sin justificaci√≥n
6. **NO** ignorar errores de TypeScript
7. **NO** subir archivos `.env` al repositorio
8. **NO** hacer commits con mensajes gen√©ricos

## ‚úÖ SIEMPRE

1. **SIEMPRE** usar Bun como runtime
2. **SIEMPRE** seguir commits convencionales
3. **SIEMPRE** tipar el c√≥digo TypeScript
4. **SIEMPRE** optimizar para performance
5. **SIEMPRE** pensar en accesibilidad
6. **SIEMPRE** documentar decisiones importantes
7. **SIEMPRE** testear en desarrollo antes de commit

## üîß Comandos √ötiles

```bash
# Desarrollo
bun run dev

# Verificar c√≥digo
bun run lint
bun run check

# Formatear
bun run format

# Build
bun run build
bun run preview

# Analizar bundle
bun run analyze
```

## üìù Ejemplo de Flujo de Trabajo

1. Crear rama feature: `git checkout -b feat/nueva-funcionalidad`
2. Desarrollar con: `bun run dev`
3. Antes de commit: `bun run check`
4. Commit: `git commit -m "feat: a√±adir componente de navegaci√≥n"`
5. Push: `git push origin feat/nueva-funcionalidad`
6. Crear Pull Request con descripci√≥n detallada

---

**Recuerda**: Estos est√°ndares existen para mantener la calidad, consistencia y mantenibilidad del c√≥digo. Husky se encargar√° de validar muchas de estas reglas autom√°ticamente.


