---
import { Icon } from 'astro-icon/components';

// Tech icons to display around the orbit with their respective colors
const techIcons = [
  { name: 'simple-icons:typescript', id: 'ts', color: '#3178C6', label: 'TypeScript' },
  { name: 'simple-icons:react', id: 'react', color: '#61DAFB', label: 'React' },
  { name: 'simple-icons:vuedotjs', id: 'vue', color: '#4FC08D', label: 'Vue.js' },
  { name: 'simple-icons:astro', id: 'astro', color: '#FF5D01', label: 'Astro' },
  { name: 'simple-icons:wordpress', id: 'wp', color: '#21759B', label: 'WordPress' },
  { name: 'simple-icons:docker', id: 'docker', color: '#2496ED', label: 'Docker' },
  { name: 'simple-icons:nodedotjs', id: 'node', color: '#539E43', label: 'Node.js' },
  { name: 'simple-icons:php', id: 'php', color: '#777BB4', label: 'PHP' },
  { name: 'simple-icons:laravel', id: 'laravel', color: '#FF2D20', label: 'Laravel' },
  { name: 'simple-icons:python', id: 'python', color: '#3776AB', label: 'Python' },
  { name: 'simple-icons:mongodb', id: 'mongodb', color: '#47A248', label: 'MongoDB' },
  { name: 'simple-icons:postgresql', id: 'postgresql', color: '#336791', label: 'PostgreSQL' },
  { name: 'simple-icons:git', id: 'git', color: '#F05032', label: 'Git' },
  { name: 'simple-icons:nestjs', id: 'nestjs', color: '#E0234E', label: 'NestJS' },
  { name: 'simple-icons:tailwindcss', id: 'tailwind', color: '#38BDF8', label: 'Tailwind' },
];

const uniqueId = 'tech-orbit-' + Math.random().toString(36).substring(2, 9);
---

<!-- Desktop orbit -->
<svg
  class="tech-orbit-svg desktop-orbit"
  viewBox="0 0 1200 400"
  preserveAspectRatio="xMidYMid meet"
>
  <defs>
    <path
      id={`orbitPath-${uniqueId}`}
      d="M-0.180542 1.00049C25.4695 38.8876 54.8217 74.525 87.6406 107.344C223.792 243.495 408.453 319.984 601 319.984C793.547 319.984 978.208 243.495 1114.36 107.344C1146.31 75.3927 1174.98 40.7699 1200.14 4.00049"
    ></path>

    <!-- Edge gradients for desktop -->
    <linearGradient id="leftEdgeGradient" x1="0" y1="0" x2="0.1" y2="0">
      <stop offset="0%" stop-color="#111111" stop-opacity="1"></stop>
      <stop offset="100%" stop-color="#111111" stop-opacity="0"></stop>
    </linearGradient>

    <linearGradient id="rightEdgeGradient" x1="0.9" y1="0" x2="1" y2="0">
      <stop offset="0%" stop-color="#111111" stop-opacity="0"></stop>
      <stop offset="100%" stop-color="#111111" stop-opacity="1"></stop>
    </linearGradient>

    <mask id="edgeMask">
      <rect width="1200" height="400" fill="white"></rect>
      <rect x="0" y="0" width="120" height="400" fill="url(#leftEdgeGradient)"></rect>
      <rect x="1080" y="0" width="120" height="400" fill="url(#rightEdgeGradient)"></rect>
    </mask>

    <!-- Filtros de glow para cada icono -->
    {
      techIcons.map((icon) => (
        <filter id={`glow-${icon.id}`} x="-50%" y="-50%" width="200%" height="200%">
          <feGaussianBlur stdDeviation="5" result="blur" />
          <feFlood flood-color={icon.color} flood-opacity="0.5" result="color" />
          <feComposite in="color" in2="blur" operator="in" result="glow" />
          <feMerge>
            <feMergeNode in="glow" />
            <feMergeNode in="SourceGraphic" />
          </feMerge>
        </filter>
      ))
    }
  </defs>

  <!-- Apply mask to the entire SVG content -->
  <g mask="url(#edgeMask)">
    <use
      href={`#orbitPath-${uniqueId}`}
      stroke="var(--color-base-300, #d1d5db)"
      stroke-width="1"
      fill="none"
      class="orbit-path"></use>

    <!-- Tech icons positioned along the path for desktop -->
    {
      techIcons.map((icon, index) => {
        // Distribuir los iconos uniformemente a lo largo del path desde el inicio
        const offset = index / techIcons.length;
        const animationDuration = 180; // 3 minutos para una rotaci√≥n completa

        return (
          <g class={`tech-icon icon-${icon.id}`} filter={`url(#glow-${icon.id})`}>
            <animateMotion
              dur={`${animationDuration}s`}
              begin={`-${offset * animationDuration}s`}
              repeatCount="indefinite"
              rotate="auto"
              calcMode="linear"
            >
              <mpath href={`#orbitPath-${uniqueId}`} />
            </animateMotion>

            <circle
              r="34"
              fill="#111111"
              stroke={icon.color}
              stroke-width="1.5"
              class="icon-circle"
            />

            <foreignObject width="50" height="50" x="-25" y="-25">
              <div class="icon-wrapper" style={`color: ${icon.color};`}>
                <Icon name={icon.name} width="35" height="35" />
              </div>
            </foreignObject>

            <g class="tech-label">
              <rect
                x="-50"
                y="40"
                width="100"
                height="30"
                rx="4"
                ry="4"
                fill="rgba(0,0,0,0.8)"
                stroke={icon.color}
                stroke-width="1"
              />
              <text
                x="0"
                y="60"
                text-anchor="middle"
                fill={icon.color}
                font-size="16"
                font-weight="bold"
                font-family="sans-serif"
              >
                {icon.label}
              </text>
            </g>
          </g>
        );
      })
    }
  </g>
</svg>

<!-- Mobile orbit -->
<svg class="tech-orbit-svg mobile-orbit" viewBox="0 0 400 200" preserveAspectRatio="xMidYMid meet">
  <defs>
    <path id={`orbitPathMobile-${uniqueId}`} d="M-20 5C20 50 100 110 200 110C300 110 380 50 420 5"
    ></path>

    <!-- Edge gradients for mobile -->
    <linearGradient id="leftEdgeMobileGradient" x1="0" y1="0" x2="0.1" y2="0">
      <stop offset="0%" stop-color="#111111" stop-opacity="1"></stop>
      <stop offset="100%" stop-color="#111111" stop-opacity="0"></stop>
    </linearGradient>

    <linearGradient id="rightEdgeMobileGradient" x1="0.9" y1="0" x2="1" y2="0">
      <stop offset="0%" stop-color="#111111" stop-opacity="0"></stop>
      <stop offset="100%" stop-color="#111111" stop-opacity="1"></stop>
    </linearGradient>

    <mask id="edgeMobileMask">
      <rect width="400" height="200" fill="white"></rect>
      <rect x="0" y="0" width="40" height="200" fill="url(#leftEdgeMobileGradient)"></rect>
      <rect x="360" y="0" width="40" height="200" fill="url(#rightEdgeMobileGradient)"></rect>
    </mask>

    <!-- Reusing the same glow filters -->
  </defs>

  <!-- Apply mask to the entire mobile SVG content -->
  <g mask="url(#edgeMobileMask)">
    <use
      href={`#orbitPathMobile-${uniqueId}`}
      stroke="var(--color-base-300, #d1d5db)"
      stroke-width="1"
      fill="none"
      class="orbit-path"></use>

    <!-- Mobile tech icons - we'll show 5 groups of icons that rotate -->
    {
      Array.from({ length: 9 }, (_, groupIndex) => {
        // Each group will show a subset of 7 consecutive icons
        const startIndex = (groupIndex * 3) % techIcons.length;
        const groupIcons = [...Array(9)].map(
          (_, i) => techIcons[(startIndex + i) % techIcons.length]
        );

        return groupIcons.map((icon, iconIndex) => {
          const offset = iconIndex / 9; // 10 icons per group
          const animationDuration = 120; // 2 minutes for mobile rotation

          return (
            <g
              class={`tech-icon mobile-icon icon-${icon.id} group-${groupIndex}`}
              filter={`url(#glow-${icon.id})`}
              style={`opacity: ${groupIndex === 0 ? 1 : 0};`}
            >
              <animateMotion
                dur={`${animationDuration}s`}
                begin={`-${offset * animationDuration}s`}
                repeatCount="indefinite"
                rotate="auto"
                calcMode="linear"
              >
                <mpath href={`#orbitPathMobile-${uniqueId}`} />
              </animateMotion>

              <circle
                r="24"
                fill="#111111"
                stroke={icon.color}
                stroke-width="1.5"
                class="icon-circle"
              />

              <foreignObject width="30" height="30" x="-15" y="-15">
                <div class="icon-wrapper" style={`color: ${icon.color};`}>
                  <Icon name={icon.name} width="30" height="30" />
                </div>
              </foreignObject>

              <g class="tech-label">
                <rect
                  x="-45"
                  y="35"
                  width="90"
                  height="28"
                  rx="4"
                  ry="4"
                  fill="rgba(0,0,0,0.8)"
                  stroke={icon.color}
                  stroke-width="1.5"
                />
                <text
                  x="0"
                  y="54"
                  text-anchor="middle"
                  fill={icon.color}
                  font-size="14"
                  font-weight="bold"
                  font-family="sans-serif"
                >
                  {icon.label}
                </text>
              </g>
            </g>
          );
        });
      })
    }
  </g>
</svg>

<style>
  .tech-orbit-svg {
    width: 100%;
    pointer-events: all;
    max-height: 400px;
  }

  .icon-wrapper {
    display: flex;
    align-items: center;
    justify-content: center;
    width: 100%;
    height: 100%;
  }

  .tech-icon {
    cursor: pointer;
  }

  /* Hide tooltips by default */
  .tech-label {
    opacity: 0;
    transition: opacity 0.2s ease-in-out;
    pointer-events: none;
  }

  /* Show tooltips on hover */
  .tech-icon:hover .tech-label {
    opacity: 1;
  }

  /* Desktop orbit */
  .desktop-orbit {
    display: block;
    height: auto;
    max-height: 350px;
  }

  /* Mobile styles */
  .mobile-orbit {
    display: none;
    max-width: 100%;
    width: 95%;
    height: auto;
    max-height: 250px;
    overflow: visible;
    margin: 0 auto;
  }

  @media (max-width: 1024px) {
    .tech-orbit-container {
      height: 250px;
      overflow: visible;
    }

    .orbit-center-text {
      bottom: 50px;
      font-size: 0.9rem;
    }

    .desktop-orbit {
      display: none;
    }

    .mobile-orbit {
      display: block;
    }

    .tech-icon:hover .tech-label {
      opacity: 1;
    }

    .mobile-icon:active .tech-label {
      opacity: 1;
    }
  }

  @media (max-width: 768px) {
    .mobile-orbit {
      max-height: 220px;
      width: 100%;
    }

    .tech-orbit-svg {
      max-height: 220px;
    }
  }

  @media (max-width: 640px) {
    .mobile-orbit {
      max-height: 200px;
    }

    .tech-orbit-svg {
      max-height: 200px;
    }
  }

  /* Animation for mobile icon groups */
  @keyframes cycleIconGroups {
    0%,
    16% {
      opacity: 1;
    }
    20%,
    96% {
      opacity: 0;
    }
    100% {
      opacity: 1;
    }
  }

  @media (max-width: 768px) {
    .group-0 {
      animation: cycleIconGroups 120s 0s infinite;
    }
    .group-1 {
      animation: cycleIconGroups 120s -24s infinite;
    }
    .group-2 {
      animation: cycleIconGroups 120s -48s infinite;
    }
    .group-3 {
      animation: cycleIconGroups 120s -72s infinite;
    }
    .group-4 {
      animation: cycleIconGroups 120s -96s infinite;
    }
  }

  /* Performance optimizations */
  @media (prefers-reduced-motion: reduce) {
    .tech-icon animateMotion {
      animation-play-state: paused;
    }
  }

  /* GPU acceleration hints */
  .tech-icon,
  .icon-wrapper {
    will-change: transform;
    backface-visibility: hidden;
  }
</style>
