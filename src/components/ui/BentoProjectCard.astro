---
import type { Project } from '@/types/project';
import { Icon } from 'astro-icon/components';
import { Image } from 'astro:assets';

export interface Props {
  project: Project;
  index?: number;
}

const { project, index = 0 } = Astro.props;

// Helper function to get category icon
function getCategoryIcon(category: string): string {
  const icons: Record<string, string> = {
    'E-commerce': 'shopping-cart',
    'Web Design': 'paint-brush',
    'Web App': 'device-phone-mobile',
    Branding: 'sparkles',
    'Augmented Reality Game': 'cube-transparent',
  };
  return icons[category] || 'squares-2x2';
}

// Generate CSS Grid styles directly
const getGridStyles = (project: Project) => {
  const { cols, rows } = project.grid;

  return {
    '--grid-col-base': cols.base || 1,
    '--grid-col-sm': cols.sm || cols.base || 1,
    '--grid-col-md': cols.md || cols.sm || cols.base || 1,
    '--grid-col-lg': cols.lg || cols.md || cols.sm || cols.base || 1,
    '--grid-col-xl': cols.xl || cols.lg || cols.md || cols.sm || cols.base || 1,
    '--grid-row-base': rows.base || 1,
    '--grid-row-sm': rows.sm || rows.base || 1,
    '--grid-row-md': rows.md || rows.sm || rows.base || 1,
    '--grid-row-lg': rows.lg || rows.md || rows.sm || rows.base || 1,
    '--grid-row-xl': rows.xl || rows.lg || rows.md || rows.sm || rows.base || 1,
  };
};

const showOneTech = (project: Project) => project.grid.cols.lg && project.grid.cols.lg <= 5;

// Optimized text sizes for better mobile readability
const getTitleSize = (project: Project) => {
  const { cols } = project.grid;
  const maxCols = Math.max(cols.base || 1, cols.sm || 0, cols.md || 0, cols.lg || 0, cols.xl || 0);

  return maxCols >= 8
    ? 'text-lg sm:text-xl md:text-xl lg:text-xl'
    : maxCols >= 4
      ? 'text-base sm:text-lg md:text-xl lg:text-xl'
      : 'text-sm sm:text-base md:text-lg';
};

const getDescriptionSize = (project: Project) => {
  const { cols } = project.grid;
  const maxCols = Math.max(cols.base || 1, cols.sm || 0, cols.md || 0, cols.lg || 0, cols.xl || 0);

  return maxCols >= 8
    ? 'text-sm sm:text-base md:text-base line-clamp-3 sm:line-clamp-2'
    : maxCols >= 4
      ? 'text-xs sm:text-sm md:text-sm line-clamp-2'
      : 'text-xs sm:text-sm line-clamp-1';
};

// Default image dimensions based on grid size
const getImageDimensions = (project: Project) => {
  const { cols } = project.grid;
  const maxCols = Math.max(cols.base || 1, cols.sm || 0, cols.md || 0, cols.lg || 0, cols.xl || 0);

  return maxCols >= 8
    ? { width: 1600, height: 900 }
    : maxCols >= 4
      ? { width: 800, height: 1200 }
      : { width: 1000, height: 1000 };
};

const dimensions = getImageDimensions(project);
const gridStyles = getGridStyles(project);
---

<article
  class="group relative overflow-hidden rounded-xl sm:rounded-2xl bg-gray-900 border-2 border-accent/20 hover:border-accent/80 transition-all duration-500 cursor-pointer touch-manipulation"
  style={gridStyles}
  data-aos="fade-up"
  data-aos-duration="800"
  data-aos-delay={index * 100}
>
  <!-- Link para navegación (toda la tarjeta es clickeable) -->
  <a
    href={`/projects/${project.slug}`}
    class="absolute inset-0 z-40"
    aria-label={`Ver proyecto ${project.title}`}></a>

  <!-- Contenedor de imágenes -->
  <div class="relative w-full h-full overflow-hidden rounded-xl sm:rounded-2xl">
    <!-- Imagen de cover -->
    {
      project.images?.cover && (
        <Image
          src={project.images.cover.src}
          alt={project.images.cover.alt}
          class="absolute inset-0 h-full w-full object-cover transition-all duration-700 group-hover:scale-110 group-active:scale-105 z-0"
          width={dimensions.width}
          height={dimensions.height}
          loading={index < 3 ? 'eager' : 'lazy'}
          quality={90}
        />
      )
    }

    <!-- Imagen de comp (visible en hover en desktop, auto-cycling, siempre visible en mobile para cards grandes) -->
    {
      project.images?.comp && (
        <Image
          src={project.images.comp.src}
          alt={project.images.comp.alt}
          class="absolute inset-0 h-full w-full object-cover opacity-0 transition-opacity duration-500 group-hover:opacity-100 group-active:opacity-100 group-[.cycling]:opacity-100 md:opacity-0 z-10"
          width={dimensions.width}
          height={dimensions.height}
          loading="lazy"
        />
      )
    }

    <!-- Overlay optimizado para mobile -->
    <div class="absolute inset-0 z-20 pointer-events-none">
      <div
        data-blur-overlay
        class={`absolute bottom-0 -inset-x-px transition-all duration-500 before:absolute before:inset-0 before:backdrop-blur-xs before:bg-gradient-to-t before:transition-all before:duration-500 before:[mask-image:linear-gradient(to_top,black_85%,transparent_100%)] before:content-[''] ${
          project.highContrast
            ? 'before:from-black/80 before:via-black/40 before:to-transparent before:group-hover:from-black/90 before:group-hover:via-black/85 before:group-active:from-black/98 before:group-active:via-black/85 sm:before:from-black/80 sm:before:via-black/45'
            : 'before:from-black/80 before:via-black/40 before:to-transparent before:group-hover:from-black/90 before:group-hover:via-black/70 before:group-active:from-black/95 before:group-active:via-black/70 sm:before:from-black/60 sm:before:via-black/20'
        }`}
        style="height: var(--base-height)"
      >
      </div>
    </div>

    <!-- Contenido de la tarjeta con padding optimizado -->
    <div
      class="absolute inset-0 flex flex-col justify-end p-3 sm:p-4 md:p-6 lg:p-8 z-30 pointer-events-none"
    >
      <!-- Badge de categoría - siempre visible en mobile, hover en desktop -->
      <div class="mb-auto flex justify-end sm:justify-start">
        <span
          class="inline-flex items-center gap-1 text-xs font-bold text-white bg-background/30 backdrop-blur-sm px-2 py-1 sm:px-3 sm:py-1.5 rounded-full opacity-100 sm:opacity-0 sm:group-hover:opacity-100 transform translate-y-0 sm:-translate-y-20 sm:group-hover:translate-y-0 transition-all duration-500"
        >
          <Icon name={`heroicons:${getCategoryIcon(project.category)}`} class="h-3 w-3" />
          <span class="hidden md:inline">{project.category}</span>
        </span>
      </div>

      <!-- Contenido inferior -->
      <div class="space-y-1 sm:space-y-1.5">
        <!-- Título con mejor legibilidad -->
        <h3
          data-title
          class={`font-bold text-white leading-tight transition-all duration-500 translate-y-0 group-hover:translate-y-0 group-hover:mt-2 md:translate-y-20 lg:translate-y-25 sm:group-hover:translate-y-0 sm:group-hover:mt-4 ${getTitleSize(project)}`}
          style="text-shadow: 2px 2px 8px rgba(0,0,0,0.8);"
        >
          {project.title}
        </h3>

        <!-- Información expandida - más visible en mobile -->
        <div
          data-expanded-content
          class="space-y-1.5 sm:space-y-1 hidden md:block transform transition-all duration-500 opacity-100 translate-y-0 sm:opacity-0 sm:translate-y-4 sm:group-hover:opacity-100 sm:group-hover:translate-y-0"
        >
          <!-- Descripción -->
          <p
            class={`text-white/95 sm:text-white/90 leading-relaxed font-medium sm:font-normal ${getDescriptionSize(project)}`}
          >
            {project.description}
          </p>

          <!-- Fila inferior optimizada para mobile -->
          <div class="flex items-center justify-between gap-2 sm:gap-4 flex-wrap">
            <div class="flex items-center gap-2 sm:gap-3">
              <span class="text-xs sm:text-sm text-white/80 sm:text-white/70 font-medium"
                >{project.date}</span
              >

              <!-- Tecnologías: mostrar 1-2 en mobile, más en tablet+ -->
              {
                project.technologies && (
                  <div class="flex items-center gap-1 sm:gap-1.5">
                    {project.technologies.slice(0, showOneTech(project) ? 1 : 2).map((tech, i) => (
                      <span
                        class={`text-xs bg-white/15 backdrop-blur-sm px-1.5 py-0.5 sm:px-2 sm:py-1 rounded-full text-white/90 border border-white/20 ${i >= 1 ? 'hidden md:inline-block' : ''}`}
                      >
                        {tech}
                      </span>
                    ))}
                    {project.technologies.length > 2 && (
                      <span class="text-xs text-white/70 hidden md:inline">
                        +{project.technologies.length - 2}
                      </span>
                    )}
                    {project.technologies.length > 1 && (
                      <span class="text-xs text-white/70 md:hidden">
                        +{project.technologies.length - 1}
                      </span>
                    )}
                  </div>
                )
              }
            </div>

            <!-- CTA más prominente en mobile -->
            <div class="relative z-20">
              <span
                class="inline-flex items-center gap-1 text-xs sm:text-xs font-semibold sm:font-medium text-white bg-white/10 sm:bg-transparent backdrop-blur-sm sm:backdrop-blur-none px-2 py-1 sm:px-0 sm:py-0 rounded-full sm:rounded-none border border-white/20 sm:border-none sm:text-white/90 hover:text-white transition-colors"
              >
                <span class="hidden sm:inline">Ver más</span>
                <span class="sm:hidden">Ver</span>
                <Icon
                  name="heroicons:arrow-right"
                  class="h-3 w-3 sm:h-3.5 sm:w-3.5 transform group-hover:translate-x-1 transition-transform"
                />
              </span>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</article>

<style>
  /* CSS Grid styles usando custom properties */
  article {
    grid-column: span var(--grid-col-base);
    grid-row: span var(--grid-row-base);
  }

  @media (min-width: 640px) {
    article {
      grid-column: span var(--grid-col-sm);
      grid-row: span var(--grid-row-sm);
    }
  }

  @media (min-width: 768px) {
    article {
      grid-column: span var(--grid-col-md);
      grid-row: span var(--grid-row-md);
    }
  }

  @media (min-width: 1024px) {
    article {
      grid-column: span var(--grid-col-lg);
      grid-row: span var(--grid-row-lg);
    }
  }

  @media (min-width: 1280px) {
    article {
      grid-column: span var(--grid-col-xl);
      grid-row: span var(--grid-row-xl);
    }
  }
</style>

<script>
  // Auto-cycling de imágenes para project cards
  document.addEventListener('DOMContentLoaded', () => {
    const projectCards = document.querySelectorAll('[data-aos="fade-up"]');

    projectCards.forEach((card, index) => {
      const compImage = card.querySelector('img:nth-of-type(2)'); // Segunda imagen (comp)

      // Solo configurar cycling si tiene imagen comp
      if (compImage) {
        let cyclingInterval: NodeJS.Timeout | null = null;
        let isHovering = false;

        const startCycling = () => {
          if (cyclingInterval) clearInterval(cyclingInterval);

          cyclingInterval = setInterval(
            () => {
              if (!isHovering) {
                card.classList.add('cycling');

                // Volver a imagen principal después de 4 segundos
                setTimeout(() => {
                  if (!isHovering) {
                    card.classList.remove('cycling');
                  }
                }, 8000);
              }
            },
            4000 + index * 800
          ); // Intervalo base + delay para evitar sincronización
        };

        const stopCycling = () => {
          if (cyclingInterval) {
            clearInterval(cyclingInterval);
            cyclingInterval = null;
          }
        };

        // Detectar hover para pausar cycling
        card.addEventListener('mouseenter', () => {
          isHovering = true;
          card.classList.remove('cycling');
        });

        card.addEventListener('mouseleave', () => {
          isHovering = false;
        });

        // Pausar cycling cuando la tarjeta no es visible
        const observer = new IntersectionObserver(
          (entries) => {
            entries.forEach((entry) => {
              if (entry.isIntersecting) {
                // Delay inicial antes de empezar el cycling
                setTimeout(startCycling, 2000 + index * 150);
              } else {
                stopCycling();
                card.classList.remove('cycling');
              }
            });
          },
          { threshold: 0.3 }
        );

        observer.observe(card);

        // Cleanup al salir de la página
        window.addEventListener('beforeunload', stopCycling);
      }
    });
  });
</script>
