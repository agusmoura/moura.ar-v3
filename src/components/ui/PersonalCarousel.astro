---
import type { PersonalCard } from '@/types/personal-card';
import { personalCardsData } from '@/data/personal-cards';

// Utility for card styles - simplified and performant
const getCardStyles = (colors?: PersonalCard['colors']) => {
  return {
    gradient: colors?.border || '',
    glow: colors?.glow || '',
    bg: colors?.background || '',
  };
};
---

<div class="overflow-container" style="width: 100vw; position: relative;">
  <div class="carousel-wrapper overflow-x-hidden">
    <div class="carousel-container relative mx-auto w-full max-w-[500px] overflow-visible">
      <div class="swiper carousel" style="padding-top: 10px; padding-bottom: 10px;">
        <div class="swiper-wrapper">
          {
            personalCardsData.map((card) => {
              const styles = getCardStyles(card.colors);
              return (
                <div class="swiper-slide">
                  <div class="card-flip group relative card-container">
                    <div class="card-face">
                      <div
                        class={`relative h-full overflow-visible rounded-xl ring-2 ${styles.glow || 'ring-white/20'}`}
                      >
                        <div
                          class={`absolute inset-0 rounded-xl bg-gradient-to-br ${styles.gradient} p-[2px]`}
                        >
                          <div
                            class={`relative h-full w-full overflow-hidden rounded-xl ${styles.bg || 'bg-gray-900'} bg-[url('https://cdn.moura.ar/bgCardFront.webp')] bg-[length:368px_520px] bg-no-repeat bg-center`}
                          >
                            <div class="shimmer absolute inset-0 opacity-0 z-1 pointer-events-none" />

                            <div class="relative flex h-full flex-col">
                              {/* Flip indicator - subtle corner indicator */}
                              <div
                                class={`absolute ${card.category ? 'top-12 right-2' : 'top-2 right-2'} z-40`}
                              >
                                <div
                                  class={`flip-indicator group/flip relative bg-gradient-to-br ${styles.gradient} p-px rounded-full shadow-sm`}
                                >
                                  <div
                                    class={`${styles.bg || 'bg-gray-900'} rounded-full p-2 backdrop-blur-sm border border-white/5`}
                                  >
                                    <svg
                                      class="h-3 w-3 opacity-50 transition-all duration-500 group-hover/flip:rotate-180 group-hover/flip:opacity-80"
                                      fill="none"
                                      viewBox="0 0 24 24"
                                      stroke="currentColor"
                                    >
                                      <path
                                        stroke-linecap="round"
                                        stroke-linejoin="round"
                                        stroke-width="2"
                                        d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"
                                      />
                                    </svg>
                                  </div>
                                </div>
                              </div>

                              {card.category && (
                                <div class="absolute -top-1 right-0 z-30 translate-x-1">
                                  <div
                                    class={`bg-gradient-to-br ${styles.gradient} p-px rounded-bl-lg rounded-tr-xl`}
                                  >
                                    <div
                                      class={`${styles.bg || 'bg-gray-900'} px-3 py-1 rounded-bl-lg rounded-tr-xl`}
                                    >
                                      <span class="text-xs font-bold uppercase tracking-wider text-white">
                                        {card.category}
                                      </span>
                                    </div>
                                  </div>
                                </div>
                              )}

                              <div class="relative z-20 p-4 sm:p-4 pb-1">
                                <h3 class="text-lg sm:text-lg font-bold text-white">
                                  {card.primary_title}
                                </h3>
                                <p class="text-sm text-gray-300">{card.tagline}</p>

                                {card.tags && (
                                  <div class="mt-3 sm:mt-3 flex flex-wrap gap-1.5">
                                    {card.tags.map((tag) => (
                                      <span class="rounded-full bg-white/10 px-2 sm:px-2 py-1 sm:py-1 text-[0.6rem] font-medium uppercase tracking-wide text-white backdrop-blur-sm border border-white/10">
                                        {tag}
                                      </span>
                                    ))}
                                  </div>
                                )}

                                <div class="mt-2 h-px bg-gradient-to-r from-transparent via-white/30 to-transparent" />
                              </div>

                              <div class="relative flex-1 px-1 sm:px-1 flex items-center justify-center min-h-[200px]">
                                <div class="aspect-square w-[90%] max-w-[320px]">
                                  <img
                                    src={card.image}
                                    alt={card.primary_title}
                                    width="350"
                                    height="350"
                                    class="h-full w-full object-contain rounded-lg transition-opacity duration-300"
                                    loading="lazy"
                                    decoding="async"
                                  />
                                </div>
                              </div>

                              <div class="pb-4 px-3">
                                <div class="mb-2 mt-1 h-px bg-gradient-to-r from-transparent via-white/30 to-transparent" />

                                <p class="text-center text-sm italic text-white/60 font-serif leading-tight sm:leading-normal">
                                  "{card.preview_text}"
                                </p>
                              </div>

                              <div class="absolute bottom-0 right-0 hidden sm:block items-center gap-1 rounded bg-black/30 px-2 py-0.5 text-xs font-mono text-white/30">
                                <span class="h-1 w-1 rounded-full bg-current" />#
                                {String(card.id).padStart(3, '0')}
                                <span class="h-1 w-1 rounded-full bg-current" />
                              </div>
                            </div>
                          </div>
                        </div>
                      </div>
                    </div>

                    <div class="card-face card-back">
                      <div
                        class={`relative h-full overflow-visible rounded-xl ring-2 ${styles.glow || 'ring-white/20'}`}
                      >
                        <div
                          class={`absolute inset-0 rounded-xl bg-gradient-to-br ${styles.gradient} p-[2px]`}
                        >
                          <div
                            class={`relative h-full w-full overflow-hidden rounded-xl ${styles.bg || 'bg-gray-900'} bg-[url('https://cdn.moura.ar/bgCardBack.webp')] bg-[length:330px_480px] bg-no-repeat bg-center`}
                          >
                            {/* Enhanced back content structure */}
                            <div class="relative flex h-full flex-col">
                              {/* Header section with improved visual hierarchy */}
                              <div class="relative pt-6 pb-4 px-6">
                                <div class="text-center relative z-10">
                                  {/* Decorative top accent */}
                                  <div class="flex items-center justify-center mb-3">
                                    <div class="flex-1 h-px bg-gradient-to-r from-transparent via-white/20 to-white/40" />
                                    <div
                                      class={`mx-3 w-2 h-2 rounded-full bg-gradient-to-r ${styles.gradient} flex-shrink-0`}
                                    />
                                    <div class="flex-1 h-px bg-gradient-to-r from-white/40 via-white/20 to-transparent" />
                                  </div>

                                  <h3 class="text-lg sm:text-xl font-bold text-white mb-2 tracking-wide">
                                    {card.story.title}
                                  </h3>
                                </div>
                              </div>

                              {/* Main content area with improved spacing and design */}
                              {card.story && (
                                <div class="flex-1 px-6 space-y-4">
                                  {/* Content with background container */}
                                  <div class="text-left">
                                    <div class="rounded-lg bg-black/20 backdrop-blur-sm border border-white/10 p-4">
                                      {/* Content with improved typography */}
                                      {Array.isArray(card.story.key_points) ? (
                                        <div class="space-y-2">
                                          {card.story.key_points.map((point: string) => (
                                            <div class="flex items-start gap-3 group">
                                              {/* Enhanced bullet point with animation */}
                                              <div class="relative mt-2 flex-shrink-0">
                                                <div
                                                  class={`w-2 h-2 rounded-full bg-gradient-to-r ${styles.gradient} group-hover:scale-125 transition-transform duration-200`}
                                                />
                                                <div
                                                  class={`absolute inset-0 w-2 h-2 rounded-full bg-gradient-to-r ${styles.gradient} animate-ping opacity-20`}
                                                />
                                              </div>

                                              <p class="text-sm text-gray-200 leading-relaxed font-medium group-hover:text-white transition-colors duration-200">
                                                {point}
                                              </p>
                                            </div>
                                          ))}
                                        </div>
                                      ) : (
                                        <p class="text-sm text-gray-200 leading-relaxed font-medium text-left">
                                          {card.story.key_points}
                                        </p>
                                      )}
                                    </div>
                                  </div>

                                  {/* Enhanced note section */}
                                  {card.story.note && (
                                    <div class="relative">
                                      <div class="rounded-lg border border-white/10 bg-black/20 backdrop-blur-sm p-2">
                                        <p class="text-xs text-yellow-200/80 italic leading-relaxed text-center">
                                          {card.story.note}
                                        </p>
                                      </div>
                                    </div>
                                  )}

                                  {/* Enhanced CTA button */}
                                  {(card.story.cta || card.story.link) && (
                                    <div class="text-center pt-3">
                                      <a
                                        href={card.story.cta?.url || card.story.link?.url || '#'}
                                        target={
                                          card.story.cta?.target ||
                                          card.story.link?.target ||
                                          '_blank'
                                        }
                                        rel="noopener noreferrer"
                                        class={`group relative inline-flex items-center gap-2 px-5 py-2.5 rounded-xl bg-gradient-to-r ${styles.gradient} hover:shadow-xl hover:shadow-white/20 transform hover:scale-110 transition-all duration-300 font-semibold text-sm text-white overflow-hidden border border-white/20`}
                                      >
                                        {/* Enhanced button background effect */}
                                        <div class="absolute inset-0 bg-white/20 rounded-xl transform scale-0 group-hover:scale-100 transition-transform duration-300" />

                                        {/* Animated glow effect */}
                                        <div
                                          class={`absolute -inset-1 bg-gradient-to-r ${styles.gradient} opacity-20 blur-sm rounded-xl group-hover:opacity-40 transition-opacity duration-300`}
                                        />

                                        <span class="relative z-10 tracking-wide">
                                          {card.story.cta?.text ||
                                            card.story.link?.text ||
                                            'Más información'}
                                        </span>

                                        <svg
                                          class="relative z-10 w-4 h-4 transform group-hover:translate-x-1 group-hover:rotate-12 transition-all duration-300"
                                          fill="none"
                                          viewBox="0 0 24 24"
                                          stroke="currentColor"
                                        >
                                          <path
                                            stroke-linecap="round"
                                            stroke-linejoin="round"
                                            stroke-width="2.5"
                                            d="M17 8l4 4m0 0l-4 4m4-4H3"
                                          />
                                        </svg>
                                      </a>
                                    </div>
                                  )}
                                </div>
                              )}
                            </div>
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              );
            })
          }
        </div>
      </div>
    </div>
  </div>

  <style>
    /* Performance-optimized styles using GPU acceleration */
    .carousel-container {
      perspective: 1200px;
      contain: layout style;
    }

    .swiper-slide {
      width: 390px;
      height: 560px;
      overflow: visible;
      will-change: transform;
      display: flex;
      align-items: center;
      justify-content: center;
    }

    @media (max-width: 640px) {
      .swiper-slide {
        width: 350px;
        height: 510px;
        display: flex;
        align-items: center;
        justify-content: center;
      }
    }

    /* Optimized carousel wrapper */
    .carousel-wrapper {
      width: 100%;
      max-width: 100vw;
      overflow-x: visible;
      position: relative;
      contain: layout;
    }

    /* Streamlined swiper styles */
    .swiper {
      overflow: visible;
      max-width: 100%;
      contain: layout style;
    }

    .swiper-wrapper {
      position: relative;
      will-change: transform;
    }

    /* Mobile optimizations */
    @media (max-width: 640px) {
      .overflow-container {
        width: 100vw;
        max-width: 100vw;
        height: 520px;
        position: relative;
        left: 0;
        right: 0;
        overflow-x: hidden;
      }

      .carousel-wrapper {
        padding: 0 15px;
        width: 100%;
        max-width: 100%;
      }

      .carousel-container {
        width: 100%;
      }

      .swiper {
        width: 100%;
        overflow: visible;
      }

      .swiper-wrapper {
        width: auto;
      }

      .swiper-slide {
        width: 350px;
        height: 510px;
        display: flex;
        align-items: center;
        justify-content: center;
      }

      .swiper-3d .swiper-slide {
        max-width: 350px;
      }

      .swiper {
        clip-path: inset(0 0 0 0);
      }

      .card-back .p-6 {
        padding: 1rem;
      }

      .card-back {
        overflow-y: auto;
        scrollbar-width: none;
        -ms-overflow-style: none;
      }

      .card-back::-webkit-scrollbar {
        display: none;
      }
    }

    /* Optimized card flip mechanics */
    .card-flip {
      position: relative;
      width: 350px;
      height: 520px;
      transform-style: preserve-3d;
      transition: transform 0.4s cubic-bezier(0.4, 0, 0.2, 1);
      cursor: pointer;
      will-change: transform;
    }

    @media (max-width: 640px) {
      .card-flip {
        width: 320px;
        height: 480px;
      }
    }

    /* Flip states using CSS classes instead of inline styles */
    .card-flip.flipped {
      transform: rotateY(180deg);
    }

    .card-flip.tilted {
      transition: none;
    }

    .card-face {
      position: absolute;
      width: 100%;
      height: 100%;
      backface-visibility: hidden;
      -webkit-backface-visibility: hidden;
      transform: translateZ(0);
    }

    .card-back {
      transform: rotateY(180deg) translateZ(0);
    }

    /* Optimized shimmer effect */
    .shimmer {
      background: linear-gradient(
        var(--shimmer-angle, 45deg),
        transparent 40%,
        rgba(255, 255, 255, 0.08) 50%,
        transparent 60%
      );
      will-change: opacity;
      transform: translateZ(0);
    }

    .card-flip:hover .shimmer {
      opacity: 0.6;
    }

    /* Optimized flip indicator animation */
    .flip-indicator {
      animation: very-subtle-pulse 4s ease-in-out infinite;
      will-change: opacity, transform;
    }

    @keyframes very-subtle-pulse {
      0%,
      100% {
        opacity: 0.6;
        transform: scale(1) translateZ(0);
      }
      50% {
        opacity: 0.8;
        transform: scale(1.05) translateZ(0);
      }
    }

    .flip-indicator:hover {
      animation: none;
      opacity: 1;
      transform: scale(1.1) translateZ(0);
    }
  </style>

  <script>
    import Swiper from 'swiper';
    import 'swiper/css';
    import 'swiper/css/effect-cards';
    import { EffectCards } from 'swiper/modules';

    // Performance utilities - keeping only what we use
    // throttle and debounce removed as they were causing TypeScript issues and not needed

    let swiperInstance: Swiper | null = null;
    let cardHandlers = new Map<
      HTMLElement,
      {
        click: (e: Event) => void;
        mousemove: (e: MouseEvent) => void;
        mouseleave: () => void;
      }
    >();
    let intersectionObserver: IntersectionObserver | null = null;

    // Performance-optimized Swiper initialization
    function initSwiper() {
      const carouselElement = document.querySelector('.carousel');
      if (!carouselElement || swiperInstance) return;

      const isMobile = window.innerWidth <= 640;

      swiperInstance = new Swiper('.carousel', {
        modules: [EffectCards],
        effect: 'cards',
        grabCursor: true,
        centeredSlides: true,
        slidesPerView: 'auto' as const,
        cardsEffect: {
          perSlideOffset: isMobile ? 5 : 9,
          perSlideRotate: isMobile ? 1 : 3,
          rotate: true,
          slideShadows: false, // Disabled for performance
        },
        loop: true,
        speed: 300,
        watchOverflow: false, // Disabled for performance
        preventClicks: true,
        preventClicksPropagation: true,
        // Performance optimizations
        updateOnWindowResize: false,
        resistanceRatio: 0.85,
        touchRatio: 1,
        touchAngle: 45,
        simulateTouch: true,
        allowTouchMove: true,
        passiveListeners: true,
      });
    }

    // Optimized card interactions with event delegation
    function initCardInteractions() {
      // Use intersection observer for performance
      if (intersectionObserver) {
        intersectionObserver.disconnect();
      }

      intersectionObserver = new IntersectionObserver(
        (entries) => {
          entries.forEach((entry) => {
            if (entry.isIntersecting) {
              const card = entry.target as HTMLElement;
              if (!card.dataset.initialized) {
                setupCardHandlers(card);
              }
            }
          });
        },
        { threshold: 0.1 }
      );

      // Observe all cards
      const cards = document.querySelectorAll('.card-flip');
      cards.forEach((card) => {
        intersectionObserver?.observe(card);
      });
    }

    function setupCardHandlers(cardElement: HTMLElement) {
      if (cardElement.dataset.initialized) return;
      cardElement.dataset.initialized = 'true';

      let isFlipped = false;
      let rafId: number | null = null;

      // Optimized click handler
      const clickHandler = (e: Event) => {
        const target = e.target as HTMLElement;
        if (target?.closest('a')) return;

        if (rafId) {
          cancelAnimationFrame(rafId);
          rafId = null;
        }

        isFlipped = !isFlipped;
        cardElement.classList.toggle('flipped', isFlipped);

        // Reset tilt and shimmer
        cardElement.classList.remove('tilted');
        cardElement.style.transform = isFlipped ? 'rotateY(180deg)' : '';
        cardElement.style.setProperty('--shimmer-angle', '45deg');
      };

      // Optimized mousemove handler with smooth transforms - keeping shimmer effect
      const mouseMoveHandler = (e: MouseEvent) => {
        if (isFlipped || rafId) return;

        rafId = requestAnimationFrame(() => {
          const rect = cardElement.getBoundingClientRect();
          const x = (e.clientX - rect.left) / rect.width - 0.5;
          const y = (e.clientY - rect.top) / rect.height - 0.5;

          // Apply smooth tilt transform
          cardElement.style.transform = `
            perspective(1000px)
            rotateX(${y * -12}deg)
            rotateY(${x * 12}deg)
            scale3d(1.02, 1.02, 1)
            translateZ(0)
          `;

          // Update shimmer angle smoothly - RESTORED
          const angle = Math.atan2(y, x) * (180 / Math.PI) + 90;
          cardElement.style.setProperty('--shimmer-angle', `${angle}deg`);
          cardElement.classList.add('tilted');

          rafId = null;
        });
      };

      // Optimized mouse leave handler
      const mouseLeaveHandler = () => {
        if (rafId) {
          cancelAnimationFrame(rafId);
          rafId = null;
        }

        cardElement.classList.remove('tilted');
        cardElement.style.setProperty('--shimmer-angle', '45deg');

        // Reset transform based on flip state
        if (isFlipped) {
          cardElement.style.transform = 'rotateY(180deg)';
        } else {
          cardElement.style.transform = '';
        }
      };

      // Add event listeners
      cardElement.addEventListener('click', clickHandler, { passive: true });
      cardElement.addEventListener('mousemove', mouseMoveHandler, { passive: true });
      cardElement.addEventListener('mouseleave', mouseLeaveHandler, { passive: true });

      // Store handlers for cleanup
      cardHandlers.set(cardElement, {
        click: clickHandler,
        mousemove: mouseMoveHandler,
        mouseleave: mouseLeaveHandler,
      });
    }

    function destroySwiper() {
      if (swiperInstance) {
        swiperInstance.destroy(true, true);
        swiperInstance = null;
      }

      // Clean up intersection observer
      if (intersectionObserver) {
        intersectionObserver.disconnect();
        intersectionObserver = null;
      }

      // Clean up carousel observer
      if (carouselObserver) {
        carouselObserver.disconnect();
        carouselObserver = null;
      }

      // Reset initialization flag
      isCarouselInitialized = false;

      // Clean up card handlers
      cardHandlers.forEach((handlers, card) => {
        card.removeEventListener('click', handlers.click);
        card.removeEventListener('mousemove', handlers.mousemove);
        card.removeEventListener('mouseleave', handlers.mouseleave);
        delete card.dataset.initialized;
      });
      cardHandlers.clear();
    }

    // Lazy loading implementation for carousel
    let isCarouselInitialized = false;
    let carouselObserver: IntersectionObserver | null = null;

    function initCarouselLazy() {
      const carouselContainer = document.querySelector('.carousel-container');
      if (!carouselContainer || isCarouselInitialized) return;

      // Setup intersection observer for lazy loading
      carouselObserver = new IntersectionObserver(
        (entries) => {
          entries.forEach((entry) => {
            if (entry.isIntersecting && !isCarouselInitialized) {
              isCarouselInitialized = true;

              // Use RAF for smooth initialization
              requestAnimationFrame(() => {
                initSwiper();
                initCardInteractions();
              });

              // Stop observing once initialized
              carouselObserver?.disconnect();
              carouselObserver = null;
            }
          });
        },
        {
          threshold: 0.1, // Trigger when 10% of carousel is visible
          rootMargin: '50px', // Start loading 50px before it becomes visible
        }
      );

      carouselObserver.observe(carouselContainer);
    }

    function initCarousel() {
      // Check if carousel is already in viewport
      const carouselContainer = document.querySelector('.carousel-container');
      if (!carouselContainer) return;

      const rect = carouselContainer.getBoundingClientRect();
      const isInViewport = rect.top < window.innerHeight && rect.bottom > 0;

      if (isInViewport) {
        // Initialize immediately if already visible
        isCarouselInitialized = true;
        requestAnimationFrame(() => {
          initSwiper();
          initCardInteractions();
        });
      } else {
        // Setup lazy loading
        initCarouselLazy();
      }
    }

    // Initialize on page load and after transitions
    if (document.readyState === 'loading') {
      document.addEventListener('DOMContentLoaded', initCarousel);
    } else {
      initCarousel();
    }

    // Handle Astro view transitions
    document.addEventListener('astro:page-load', initCarousel);
    document.addEventListener('astro:before-preparation', destroySwiper);
  </script>
</div>
