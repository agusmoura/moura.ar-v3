---
import { Image } from 'astro:assets';
import type { PersonalCard } from '@/types/personal-card';
import { personalCardsData } from '@/data/personal-cards';

// Utility for card styles - simplified and performant
const getCardStyles = (rarity: string, colors?: PersonalCard['colors']) => {
  const rarityStyles = {
    legendary: 'from-yellow-400 via-orange-500 to-red-600',
    epic: 'from-purple-400 via-purple-600 to-indigo-600',
    rare: 'from-blue-400 via-blue-600 to-cyan-600',
    common: 'from-gray-400 via-gray-600 to-gray-700',
  };

  return {
    gradient:
      colors?.border || rarityStyles[rarity as keyof typeof rarityStyles] || rarityStyles.common,
    glow: colors?.glow || '',
    bg: colors?.background || '',
  };
};
---

<div class="carousel-container relative mx-auto w-full max-w-[500px]">
  <div class="swiper carousel overflow-visible">
    <div class="swiper-wrapper">
      {
        personalCardsData.map((card) => {
          const styles = getCardStyles(card.rarity, card.colors);
          return (
            <div class="swiper-slide">
              <div class="card-flip group relative h-full w-full">
                <div class="card-face">
                  <div
                    class={`relative h-full overflow-hidden rounded-xl ring-2 ${styles.glow || 'ring-white/20'}`}
                  >
                    <div
                      class={`absolute inset-0 rounded-xl bg-gradient-to-br ${styles.gradient} p-[2px]`}
                    >
                      <div
                        class={`relative h-full w-full overflow-hidden rounded-xl ${styles.bg || 'bg-gray-900'} bg-[url('/bgCardFront.webp')] bg-[length:368px_490px] bg-no-repeat bg-center`}
                      >
                        <div class="shimmer absolute inset-0 opacity-0 z-1 pointer-events-none" />

                        <div class="relative flex h-full flex-col">
                          {card.specialTag && (
                            <div class="absolute -top-1 right-0 z-30 translate-x-1">
                              <div
                                class={`bg-gradient-to-br ${styles.gradient} p-px rounded-bl-lg rounded-tr-xl`}
                              >
                                <div
                                  class={`${styles.bg || 'bg-gray-900'} px-3 py-1 rounded-bl-lg rounded-tr-xl`}
                                >
                                  <span class="text-xs font-bold uppercase tracking-wider text-white">
                                    {card.specialTag}
                                  </span>
                                </div>
                              </div>
                            </div>
                          )}

                          <div class="relative z-20 p-4 pb-2">
                            <h3 class="text-lg font-bold text-white">{card.title}</h3>
                            <p class="text-xs text-gray-300">{card.subtitle}</p>

                            {card.tags && (
                              <div class="mt-3 flex flex-wrap gap-1">
                                {card.tags.map((tag) => (
                                  <span class="rounded-full bg-white/10 px-2 py-1 text-[0.65rem] font-medium uppercase tracking-wide text-white backdrop-blur-sm border border-white/10">
                                    {tag}
                                  </span>
                                ))}
                              </div>
                            )}

                            <div class="mt-2 h-px bg-gradient-to-r from-transparent via-white/30 to-transparent" />
                          </div>

                          <div class="relative flex-1 px-4">
                            {card.image ? (
                              <Image
                                src={card.image}
                                alt={card.title}
                                width={300}
                                height={300}
                                class="h-full w-full object-contain"
                                loading="lazy"
                              />
                            ) : (
                              <div class="flex h-full items-center justify-center">
                                <span class="text-8xl select-none">{card.icon}</span>
                              </div>
                            )}
                          </div>

                          <div class="p-4 pt-2">
                            <div class="mb-2 h-px bg-gradient-to-r from-transparent via-white/30 to-transparent" />
                            <p class="text-center text-xs italic text-white/60 font-serif text-balance">
                              "{card.description}"
                            </p>
                          </div>

                          {card.cta && (
                            <div class="p-3">
                              <a
                                href={card.cta.action}
                                class={`flex items-center justify-center gap-2 rounded-lg bg-gradient-to-br ${styles.gradient} bg-opacity-10 border border-white/20 px-4 py-3 text-sm font-medium uppercase tracking-wide text-white transition-all hover:scale-[1.02] hover:bg-opacity-20`}
                              >
                                <span>{card.cta.text}</span>
                                <span class="transition-transform group-hover:translate-x-1">
                                  {card.cta.icon}
                                </span>
                              </a>
                            </div>
                          )}

                          <div class="absolute bottom-2 right-2 flex items-center gap-1 rounded bg-black/30 px-2 py-0.5 text-xs font-mono text-white/30">
                            <span class="h-1 w-1 rounded-full bg-current" />#
                            {String(card.id).padStart(3, '0')}
                            <span class="h-1 w-1 rounded-full bg-current" />
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>

                <div class="card-face card-back">
                  <div
                    class={`relative h-full overflow-hidden rounded-xl ring-2 ${styles.glow || 'ring-white/20'}`}
                  >
                    <div
                      class={`absolute inset-0 rounded-xl bg-gradient-to-br ${styles.gradient} p-[2px]`}
                    >
                      <div
                        class={`relative h-full w-full overflow-hidden rounded-xl ${styles.bg || 'bg-gray-900'} bg-[url('/bgCardBack.webp')] bg-[length:330px_480px] bg-no-repeat bg-center`}
                      >
                        <div class="relative flex h-full flex-col p-6">
                          <div class="mb-6 text-center">
                            <h3 class="text-2xl font-bold text-white">{card.title}</h3>
                            <div class="mx-auto mt-2 h-1 w-20 rounded-full bg-gradient-to-r from-transparent via-white to-transparent" />
                          </div>

                          {card.backContent && (
                            <div class="flex-1 space-y-4">
                              <div class="rounded-lg border border-white/10 bg-white/5 backdrop-blur-sm p-4">
                                {card.backContent.title && (
                                  <h4 class="mb-3 text-sm font-bold uppercase tracking-wider text-white/80">
                                    {card.backContent.title}
                                  </h4>
                                )}
                                {Array.isArray(card.backContent.points) ? (
                                  card.backContent.points.map((point: string) => (
                                    <div class="mb-2 flex items-start gap-2">
                                      <span class="mt-1 h-1 w-1 rounded-full bg-gradient-to-r from-cyan-400 to-blue-400" />
                                      <p class="text-sm text-gray-300">{point}</p>
                                    </div>
                                  ))
                                ) : (
                                  <p class="text-sm text-gray-300">{card.backContent.points}</p>
                                )}
                              </div>

                              {card.backContent.link && (
                                <div class="text-center">
                                  <a
                                    href={card.backContent.link.url}
                                    target="_blank"
                                    rel="noopener noreferrer"
                                    class="inline-flex items-center gap-2 rounded-full border border-white/20 bg-white/10 px-4 py-2 text-sm font-medium text-white transition-all hover:bg-white/20 hover:scale-105 backdrop-blur-sm"
                                  >
                                    {card.backContent.link.text}
                                    <svg
                                      class="h-4 w-4"
                                      fill="none"
                                      viewBox="0 0 24 24"
                                      stroke="currentColor"
                                    >
                                      <path
                                        stroke-linecap="round"
                                        stroke-linejoin="round"
                                        stroke-width="2"
                                        d="M17 8l4 4m0 0l-4 4m4-4H3"
                                      />
                                    </svg>
                                  </a>
                                </div>
                              )}
                            </div>
                          )}

                          <div class="mt-4 text-center">
                            <div class="mb-2 h-px bg-gradient-to-r from-transparent via-white/30 to-transparent" />
                            <p class="text-xs text-white/40 italic font-serif">Click para volver</p>
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          );
        })
      }
    </div>
  </div>
</div>

<style>
  /* Essential styles that can't be done with Tailwind */
  .carousel-container {
    perspective: 1200px;
  }

  .swiper-slide {
    width: 350px;
    height: 500px;
    overflow: visible !important;
  }

  @media (max-width: 640px) {
    .swiper-slide {
      width: 300px;
      height: 450px;
    }
  }

  /* Card flip mechanics - Essential for 3D flip */
  .card-flip {
    position: relative;
    width: 100%;
    height: 100%;
    transform-style: preserve-3d;
    transition: transform 0.4s ease-out;
    cursor: pointer;
  }

  /* Remove automatic CSS flip, let JS handle it */
  .card-flip.flipped {
    /* JS will set transform: rotateY(180deg) */
  }

  .card-face {
    position: absolute;
    width: 100%;
    height: 100%;
    backface-visibility: hidden;
    -webkit-backface-visibility: hidden;
  }

  /* Back face is rotated 180 degrees by default */
  .card-back {
    transform: rotateY(180deg);
  }

  /* Disable transition when tilting for smooth effect */
  .card-flip.tilted {
    transition: none;
  }

  /* Shimmer effect */
  .shimmer {
    background: linear-gradient(
      var(--shimmer-angle, 45deg),
      transparent 40%,
      rgba(255, 255, 255, 0.08) 50%,
      transparent 60%
    );
  }

  .card-flip:hover .shimmer {
    opacity: 0.6;
  }

  /* Swiper shadows */
  :global(.swiper-3d .swiper-slide-shadow-cards) {
    background: linear-gradient(to bottom, transparent 50%, rgba(0, 0, 0, 0.5)) !important;
  }
</style>

<script>
  import Swiper from 'swiper';
  import 'swiper/css';
  import 'swiper/css/effect-cards';
  import { EffectCards } from 'swiper/modules';

  // Initialize Swiper
  new Swiper('.carousel', {
    modules: [EffectCards],
    effect: 'cards',
    grabCursor: true,
    centeredSlides: true,
    slidesPerView: 'auto',
    cardsEffect: {
      perSlideOffset: 9,
      perSlideRotate: 3,
      rotate: true,
      slideShadows: true,
    },
    loop: true,
    speed: 300,
  });

  // Card interactions - fixed logic
  setTimeout(() => {
    const cards = document.querySelectorAll('.card-flip');

    cards.forEach((card) => {
      const cardElement = card as HTMLElement;
      let rafId: number;

      // Card flip on click
      cardElement.addEventListener('click', (e: Event) => {
        const target = e.target as HTMLElement;
        // Don't flip if clicking on a link
        if (target?.closest('a')) return;

        // Clear any ongoing animations
        if (rafId) cancelAnimationFrame(rafId);

        // Toggle flip state
        cardElement.classList.toggle('flipped');

        // Reset any tilt effects immediately
        cardElement.classList.remove('tilted');

        // Set appropriate transform based on flip state
        if (cardElement.classList.contains('flipped')) {
          cardElement.style.transform = 'rotateY(180deg)';
        } else {
          cardElement.style.transform = '';
        }

        // Reset shimmer
        cardElement.style.setProperty('--shimmer-angle', '45deg');
      });

      // Tilt effect - only when not flipped
      const handleMouseMove = (e: MouseEvent) => {
        // Don't apply tilt if flipped
        if (cardElement.classList.contains('flipped')) return;

        if (rafId) cancelAnimationFrame(rafId);

        rafId = requestAnimationFrame(() => {
          const rect = cardElement.getBoundingClientRect();
          const x = (e.clientX - rect.left) / rect.width - 0.5;
          const y = (e.clientY - rect.top) / rect.height - 0.5;

          // Apply tilt transform
          cardElement.style.transform = `
            perspective(1000px)
            rotateX(${y * -12}deg)
            rotateY(${x * 12}deg)
            scale3d(1.02, 1.02, 1)
          `;

          // Update shimmer angle
          const angle = Math.atan2(y, x) * (180 / Math.PI) + 90;
          cardElement.style.setProperty('--shimmer-angle', `${angle}deg`);
          cardElement.classList.add('tilted');
        });
      };

      const handleMouseLeave = () => {
        if (rafId) cancelAnimationFrame(rafId);

        cardElement.classList.remove('tilted');
        cardElement.style.setProperty('--shimmer-angle', '45deg');

        // Reset transform based on flip state
        if (cardElement.classList.contains('flipped')) {
          cardElement.style.transform = 'rotateY(180deg)';
        } else {
          cardElement.style.transform = '';
        }
      };

      // Mouse enter - only start tilt if not flipped
      cardElement.addEventListener('mouseenter', () => {
        if (!cardElement.classList.contains('flipped')) {
          cardElement.addEventListener('mousemove', handleMouseMove);
        }
      });

      cardElement.addEventListener('mouseleave', () => {
        cardElement.removeEventListener('mousemove', handleMouseMove);
        handleMouseLeave();
      });
    });
  }, 100);
</script>
