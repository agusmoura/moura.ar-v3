---
interface Props {
  size?: number;
  className?: string;
  animationDelay?: number;
  fillColor?: string;
}

const { size = 48, className = '', animationDelay = 0, fillColor = '#E1DBCD' } = Astro.props;

const uniqueId = `logo-${Math.random().toString(36).substring(2, 9)}`;
---

<div class={`animated-logo ${className}`} style={`--animation-delay: ${animationDelay}ms`}>
  <svg
    xmlns="http://www.w3.org/2000/svg"
    width={size}
    height={size}
    viewBox="0 0 436 512"
    class="logo-svg"
    aria-label="Logo Agustín Moura"
  >
    <defs>
      <mask id={`${uniqueId}-reveal`}>
        <rect width="100%" height="100%" fill="black"></rect>
        <circle class="reveal-core" cx="371" cy="248" r="0" fill="white"></circle>
        <circle class="reveal-wave-1" cx="371" cy="248" r="0" fill="white"></circle>
        <circle class="reveal-wave-2" cx="371" cy="248" r="0" fill="white"></circle>
        <circle class="reveal-wave-3" cx="371" cy="248" r="0" fill="white"></circle>
        <circle class="reveal-branch-1" cx="200" cy="150" r="0" fill="white"></circle>
        <circle class="reveal-branch-2" cx="150" cy="350" r="0" fill="white"></circle>
        <circle class="reveal-branch-3" cx="280" cy="400" r="0" fill="white"></circle>
      </mask>

      <radialGradient id={`${uniqueId}-energy`} cx="371" cy="248" r="50%">
        <stop offset="0%" stop-color="#ffffff" stop-opacity="1"></stop>
        <stop offset="30%" stop-color="#efbb47" stop-opacity="0.8"></stop>
        <stop offset="70%" stop-color="#efbb47" stop-opacity="0.4"></stop>
        <stop offset="100%" stop-color="transparent"></stop>
      </radialGradient>

      <filter id={`${uniqueId}-glow`}>
        <feGaussianBlur stdDeviation="3" result="blur"></feGaussianBlur>
        <feMerge>
          <feMergeNode in="blur"></feMergeNode>
          <feMergeNode in="SourceGraphic"></feMergeNode>
        </feMerge>
      </filter>
    </defs>

    <circle
      class="energy-core"
      cx="371"
      cy="248"
      r="0"
      fill={`url(#${uniqueId}-energy)`}
      filter={`url(#${uniqueId}-glow)`}></circle>

    <g class="logo-structure" mask={`url(#${uniqueId}-reveal)`}>
      <path
        d="m371.271 248.561-.665.03c.122-.188.243-.379.364-.57.103.18.202.36.301.54ZM133.198 347.476c-.561 22.764-33.926 22.793-34.502 0 .565-22.764 33.923-22.794 34.502 0Z"
        fill={fillColor}></path>
      <path
        d="M359.452 253.74c-55.3 84.225-129.877 166.799-214.456 222.126-31.049 18.813-89.359 53.764-127.267 25.502-75.345-84.614 109.828-316.788 174.712-381.295 3.817.68 7.634 1.477 11.452 2.389C125.85 199.306 43.881 306.215 15.761 416.463c-5.069 22.698-10.075 58.954 9.639 75.463 21.693 16.105 54.8 2.29 75.164-7.159 103.002-55.698 176.878-144.612 243.09-240.954a35.24 35.24 0 0 0 15.798 9.927ZM398.209 219.946c.201 14.94-12.128 27.935-26.938 28.615-.099-.18-.198-.36-.301-.54-.121.191-.242.382-.364.57-23.737 1.121-38.349-26.94-23.983-45.779 16.173-21.959 51.725-10.198 51.586 17.134Z"
        fill={fillColor}></path>
      <path
        d="M224.345 413.776a637.044 637.044 0 0 0 5.443-5.042l-5.443 5.042ZM425.37 19.949c-53.02-61.652-162.632 35.543-208.454 76.268a276.002 276.002 0 0 1 11.503 3.543C365.732-23.025 487.06-26.414 378.318 185.763a35.211 35.211 0 0 1 15.787 8.876c22.486-44.838 60.523-127.515 31.265-174.69Z"
        fill={fillColor}></path>
      <path
        d="M224.344 413.777a622.6 622.6 0 0 0 5.444-5.043l-5.444 5.043Zm-87.541-54.713a24.104 24.104 0 0 1-5.777 6.913c21.149 15.807 44.222 29.063 68.649 39.034a689.477 689.477 0 0 0 5.447-5.086c-24.75-10.35-48.043-24.624-68.319-40.861Zm275.107-45.929c-1.46-23.639-8.141-46.216-18.48-67.245a35.22 35.22 0 0 1-12.12 7.324c57.289 112.983-32.701 187.899-144.056 157.6a798.142 798.142 0 0 1-5.447 5.102c79.745 26.163 185.587-2.691 180.103-102.781ZM76.658 291.874a618.03 618.03 0 0 0-7.19 12.304c7.965 11.008 16.807 21.364 26.104 30.879a24.02 24.02 0 0 1 7.675-7.795c-9.77-10.941-18.804-22.808-26.589-35.388ZM353.542 188.534a35.474 35.474 0 0 0-11.437 9.35c-41.065-42.801-93.432-74.787-151.962-84.904C83.309 94.512 16.223 168.685 65.001 270.422a804.76 804.76 0 0 0-8.523 13.848c-55.612-86.908-12.737-194.536 97-190.747 76.328 1.224 148.934 39.88 200.064 95.011Z"
        fill={fillColor}></path>
    </g>
  </svg>
</div>

<style>
  .animated-logo {
    --animation-delay: 0ms;
    display: inline-block;
  }

  .logo-svg {
    display: block;
    overflow: visible;
  }

  .energy-core {
    opacity: 0;
    animation: coreAwaken 1s ease-out forwards;
    animation-delay: calc(var(--animation-delay) + 200ms);
  }

  .reveal-core {
    animation: expandCore 0.8s cubic-bezier(0.25, 0.46, 0.45, 0.94) forwards;
    animation-delay: calc(var(--animation-delay) + 600ms);
  }

  .reveal-wave-1 {
    animation: expandWave 1.2s cubic-bezier(0.25, 0.46, 0.45, 0.94) forwards;
    animation-delay: calc(var(--animation-delay) + 800ms);
  }

  .reveal-wave-2 {
    animation: expandWave 1.8s cubic-bezier(0.25, 0.46, 0.45, 0.94) forwards;
    animation-delay: calc(var(--animation-delay) + 1000ms);
  }

  .reveal-wave-3 {
    animation: expandWave 2.4s cubic-bezier(0.25, 0.46, 0.45, 0.94) forwards;
    animation-delay: calc(var(--animation-delay) + 1200ms);
  }

  .reveal-branch-1 {
    animation: expandBranch 1.5s cubic-bezier(0.25, 0.46, 0.45, 0.94) forwards;
    animation-delay: calc(var(--animation-delay) + 1400ms);
  }

  .reveal-branch-2 {
    animation: expandBranch 1.3s cubic-bezier(0.25, 0.46, 0.45, 0.94) forwards;
    animation-delay: calc(var(--animation-delay) + 1600ms);
  }

  .reveal-branch-3 {
    animation: expandBranch 1.1s cubic-bezier(0.25, 0.46, 0.45, 0.94) forwards;
    animation-delay: calc(var(--animation-delay) + 1800ms);
  }

  @keyframes coreAwaken {
    0% {
      opacity: 0;
      r: 0;
    }
    30% {
      opacity: 1;
      r: 8;
    }
    100% {
      opacity: 0.6;
      r: 15;
    }
  }

  @keyframes expandCore {
    from {
      r: 0;
    }
    to {
      r: 40;
    }
  }

  @keyframes expandWave {
    from {
      r: 0;
    }
    to {
      r: 350;
    }
  }

  @keyframes expandBranch {
    from {
      r: 0;
    }
    to {
      r: 250;
    }
  }

  .animated-logo:hover .energy-core {
    animation: corePulse 0.6s ease-in-out infinite;
  }

  .animated-logo:hover .logo-structure {
    transform: scale(1.05);
    transition: transform 0.3s ease;
  }

  @keyframes corePulse {
    0%,
    100% {
      r: 15;
      opacity: 0.6;
    }
    50% {
      r: 20;
      opacity: 0.9;
    }
  }

  @keyframes lensDistortion {
    0% {
      transform: scale(0) rotate(0deg);
      opacity: 0;
      filter: blur(8px) brightness(1);
    }
    25% {
      transform: scale(1.2) rotate(90deg);
      opacity: 0.6;
      filter: blur(4px) brightness(1.3);
    }
    50% {
      transform: scale(1.5) rotate(180deg);
      opacity: 1;
      filter: blur(2px) brightness(1.5);
    }
    75% {
      transform: scale(1.8) rotate(270deg);
      opacity: 0.8;
      filter: blur(3px) brightness(1.2);
    }
    100% {
      transform: scale(2.5) rotate(360deg);
      opacity: 0;
      filter: blur(6px) brightness(0.8);
    }
  }

  @media (prefers-reduced-motion: reduce) {
    .energy-core {
      animation: simpleAppear 0.8s ease forwards;
      animation-delay: calc(var(--animation-delay) + 200ms);
    }

    .reveal-core,
    .reveal-wave-1,
    .reveal-wave-2,
    .reveal-wave-3,
    .reveal-branch-1,
    .reveal-branch-2,
    .reveal-branch-3 {
      animation: instantReveal 0.5s ease forwards;
      animation-delay: calc(var(--animation-delay) + 400ms);
    }

    @keyframes simpleAppear {
      from {
        opacity: 0;
        r: 0;
      }
      to {
        opacity: 0.6;
        r: 15;
      }
    }

    @keyframes instantReveal {
      from {
        r: 0;
      }
      to {
        r: 400;
      }
    }
  }
</style>

<script>
  class CrystalLogoComponent {
    element: HTMLElement;
    hasPlayedOnce: boolean;

    constructor(element: HTMLElement) {
      this.element = element;
      this.hasPlayedOnce = false;
      this.init();
    }

    init(): void {
      this.setupIntersectionObserver();
      this.setupClickHandlers();
    }

    setupIntersectionObserver(): void {
      if (!('IntersectionObserver' in window)) return;

      const observer = new IntersectionObserver(
        (entries) => {
          entries.forEach((entry) => {
            if (entry.isIntersecting && !this.hasPlayedOnce) {
              this.hasPlayedOnce = true;
              this.element.classList.add('crystallizing');
            }
          });
        },
        { threshold: 0.3, rootMargin: '100px' }
      );

      observer.observe(this.element);
    }

    setupClickHandlers(): void {
      this.element.addEventListener('click', (e) => {
        e.preventDefault();

        if (e.ctrlKey) {
          this.triggerBlackHoleEffect();
        } else {
          this.handleRegularClick();
        }
      });

      // Hacer el cursor pointer para indicar que es clickeable
      this.element.style.cursor = 'pointer';
    }

    handleRegularClick(): void {
      const isHomePage =
        window.location.pathname === '/' || window.location.pathname === '/index.html';

      if (isHomePage) {
        this.triggerExplosionEffect();
      } else {
        this.navigateToHome();
      }
    }

    triggerExplosionEffect(): void {
      console.log('🎆 Logo explosion effect triggered');
      const logoRect = this.element.getBoundingClientRect();
      const centerX = logoRect.left + logoRect.width / 2;
      const centerY = logoRect.top + logoRect.height / 2;

      // Crear partículas de explosión
      this.createExplosionParticles(centerX, centerY);

      // Distorsionar el fondo de estrellas si existe
      this.distortStarField();
    }

    triggerBlackHoleEffect(): void {
      console.log('🌀 Logo black hole effect triggered');
      const logoRect = this.element.getBoundingClientRect();
      const centerX = logoRect.left + logoRect.width / 2;
      const centerY = logoRect.top + logoRect.height / 2;

      // Activar efecto agujero negro
      this.createBlackHoleEffect(centerX, centerY);
    }

    createExplosionParticles(centerX: number, centerY: number): void {
      const particleCount = 30;
      const colors = ['#efbb47', '#ffffff', '#ffd700', '#ffebcd'];

      for (let i = 0; i < particleCount; i++) {
        const particle = document.createElement('div');
        particle.style.cssText = `
        position: fixed;
        width: 4px;
        height: 4px;
        background: ${colors[Math.floor(Math.random() * colors.length)]};
        border-radius: 50%;
        pointer-events: none;
        z-index: 9999;
        left: ${centerX}px;
        top: ${centerY}px;
        box-shadow: 0 0 6px currentColor;
      `;

        document.body.appendChild(particle);

        // Animación de explosión
        const angle = (i / particleCount) * Math.PI * 2;
        const distance = 100 + Math.random() * 150;
        const duration = 800 + Math.random() * 400;

        particle
          .animate(
            [
              {
                transform: 'translate(0, 0) scale(1)',
                opacity: 1,
              },
              {
                transform: `translate(${Math.cos(angle) * distance}px, ${Math.sin(angle) * distance}px) scale(0)`,
                opacity: 0,
              },
            ],
            {
              duration,
              easing: 'cubic-bezier(0.25, 0.46, 0.45, 0.94)',
              fill: 'forwards',
            }
          )
          .addEventListener('finish', () => {
            particle.remove();
          });
      }
    }

    createBlackHoleEffect(centerX: number, centerY: number): void {
      // Disparar evento personalizado para que SpaceBackground lo escuche
      console.log('🌀 Dispatching blackHoleActivated event', { centerX, centerY });
      const blackHoleEvent = new CustomEvent('blackHoleActivated', {
        detail: { centerX, centerY },
      });
      window.dispatchEvent(blackHoleEvent);

      // Crear el contenedor principal del agujero negro
      const blackHoleContainer = document.createElement('div');
      blackHoleContainer.style.cssText = `
        position: fixed;
        left: ${centerX - 120}px;
        top: ${centerY - 120}px;
        width: 240px;
        height: 240px;
        pointer-events: none;
        z-index: 9998;
      `;

      // 1. ONDAS GRAVITACIONALES - Ripples en el espacio-tiempo
      for (let i = 0; i < 4; i++) {
        const gravitationalWave = document.createElement('div');
        gravitationalWave.style.cssText = `
          position: absolute;
          width: 100%;
          height: 100%;
          border: 2px solid rgba(139, 69, 19, ${0.3 - i * 0.05});
          border-radius: 50%;
          filter: blur(${1 + i}px);
        `;

        blackHoleContainer.appendChild(gravitationalWave);

        gravitationalWave.animate(
          [
            { transform: 'scale(0)', opacity: 0 },
            { transform: 'scale(1.5)', opacity: 0.6 },
            { transform: 'scale(2.5)', opacity: 0.3 },
            { transform: 'scale(3.5)', opacity: 0.1 },
            { transform: 'scale(4)', opacity: 0 },
          ],
          {
            duration: 4000 + i * 600,
            delay: i * 200,
            easing: 'cubic-bezier(0.25, 0.1, 0.25, 1)',
          }
        );
      }

      // 2. DISCO DE ACRECIÓN - Material rotando a diferentes velocidades
      for (let ring = 0; ring < 5; ring++) {
        const accretionRing = document.createElement('div');
        const ringSize = 200 - ring * 25;
        const temperature = 1 - ring * 0.15; // Más caliente hacia el centro

        accretionRing.style.cssText = `
          position: absolute;
          width: ${ringSize}px;
          height: ${ringSize}px;
          top: ${(240 - ringSize) / 2}px;
          left: ${(240 - ringSize) / 2}px;
          background: conic-gradient(from 0deg,
            transparent 0deg,
            rgba(${255 * temperature}, ${140 * temperature}, ${30 * temperature}, ${0.8 - ring * 0.1}) 30deg,
            rgba(${255 * temperature}, ${200 * temperature}, ${50 * temperature}, ${0.9 - ring * 0.1}) 60deg,
            transparent 90deg,
            transparent 180deg,
            rgba(${255 * temperature}, ${140 * temperature}, ${30 * temperature}, ${0.7 - ring * 0.1}) 210deg,
            rgba(${255 * temperature}, ${200 * temperature}, ${50 * temperature}, ${0.8 - ring * 0.1}) 240deg,
            transparent 270deg,
            transparent 360deg);
          border-radius: 50%;
          filter: blur(${1 + ring * 0.5}px);
          mask: radial-gradient(circle, transparent 20%, black 40%, black 90%, transparent 100%);
          -webkit-mask: radial-gradient(circle, transparent 20%, black 40%, black 90%, transparent 100%);
        `;

        blackHoleContainer.appendChild(accretionRing);

        // Rotación diferencial - más rápido hacia el centro
        const rotationSpeed = 8000 + ring * 2000;
        accretionRing.animate([{ transform: 'rotate(0deg)' }, { transform: 'rotate(360deg)' }], {
          duration: rotationSpeed,
          iterations: Infinity,
          easing: 'linear',
        });

        // Aparición del disco
        accretionRing.animate(
          [
            { transform: 'scale(0) rotate(0deg)', opacity: 0 },
            { transform: 'scale(1) rotate(180deg)', opacity: 0.8 },
            { transform: 'scale(1.2) rotate(360deg)', opacity: 1 },
            { transform: 'scale(1.1) rotate(540deg)', opacity: 0.9 },
            { transform: 'scale(0.9) rotate(720deg)', opacity: 0.6 },
            { transform: 'scale(0.5) rotate(900deg)', opacity: 0.3 },
            { transform: 'scale(0.1) rotate(1080deg)', opacity: 0.1 },
            { transform: 'scale(0) rotate(1260deg)', opacity: 0 },
          ],
          {
            duration: 7000,
            delay: ring * 300,
            easing: 'cubic-bezier(0.25, 0.1, 0.25, 1)',
          }
        );
      }

      // 3. JETS POLARES - Chorros de material relativista
      for (let jet = 0; jet < 2; jet++) {
        const polarJet = document.createElement('div');
        const jetDirection = jet === 0 ? -1 : 1; // Arriba y abajo

        polarJet.style.cssText = `
          position: absolute;
          width: 6px;
          height: 80px;
          left: 117px;
          top: ${jet === 0 ? 20 : 140}px;
          background: linear-gradient(${jet === 0 ? '0deg' : '180deg'},
            rgba(135, 206, 255, 0.9) 0%,
            rgba(100, 149, 237, 0.8) 30%,
            rgba(65, 105, 225, 0.6) 60%,
            transparent 100%);
          border-radius: 3px;
          filter: blur(1px);
          box-shadow: 0 0 15px rgba(135, 206, 255, 0.6);
        `;

        blackHoleContainer.appendChild(polarJet);

        // Animación de los jets
        polarJet.animate(
          [
            {
              transform: `scaleY(0) translateY(${jetDirection * 20}px)`,
              opacity: 0,
              filter: 'blur(3px)',
            },
            {
              transform: `scaleY(1.5) translateY(${jetDirection * -10}px)`,
              opacity: 1,
              filter: 'blur(1px)',
            },
            {
              transform: `scaleY(2) translateY(${jetDirection * -30}px)`,
              opacity: 0.8,
              filter: 'blur(0.5px)',
            },
            {
              transform: `scaleY(1.8) translateY(${jetDirection * -25}px)`,
              opacity: 0.6,
              filter: 'blur(1px)',
            },
            {
              transform: `scaleY(1.2) translateY(${jetDirection * -15}px)`,
              opacity: 0.4,
              filter: 'blur(1.5px)',
            },
            {
              transform: `scaleY(0.5) translateY(${jetDirection * 10}px)`,
              opacity: 0.2,
              filter: 'blur(2px)',
            },
            {
              transform: `scaleY(0.1) translateY(${jetDirection * 30}px)`,
              opacity: 0.05,
              filter: 'blur(3px)',
            },
            {
              transform: `scaleY(0) translateY(${jetDirection * 40}px)`,
              opacity: 0,
              filter: 'blur(4px)',
            },
          ],
          {
            duration: 5500,
            delay: 1000 + jet * 200,
            easing: 'cubic-bezier(0.25, 0.1, 0.25, 1)',
          }
        );
      }

      // 4. HORIZONTE DE EVENTOS - La frontera de no retorno
      const eventHorizon = document.createElement('div');
      eventHorizon.style.cssText = `
        position: absolute;
        width: 40px;
        height: 40px;
        top: 100px;
        left: 100px;
        background: radial-gradient(circle,
          rgba(0, 0, 0, 1) 0%,
          rgba(0, 0, 0, 0.95) 70%,
          rgba(139, 69, 19, 0.4) 90%,
          transparent 100%);
        border-radius: 50%;
        box-shadow: 
          0 0 20px rgba(0, 0, 0, 0.8),
          inset 0 0 10px rgba(139, 69, 19, 0.3);
      `;

      blackHoleContainer.appendChild(eventHorizon);

      eventHorizon.animate(
        [
          {
            transform: 'scale(0)',
            opacity: 0,
            filter: 'brightness(1)',
          },
          {
            transform: 'scale(1)',
            opacity: 1,
            filter: 'brightness(0.5)',
          },
          {
            transform: 'scale(1.1)',
            opacity: 1,
            filter: 'brightness(0.3)',
          },
          {
            transform: 'scale(1.05)',
            opacity: 0.95,
            filter: 'brightness(0.2)',
          },
          {
            transform: 'scale(0.95)',
            opacity: 0.8,
            filter: 'brightness(0.15)',
          },
          {
            transform: 'scale(0.7)',
            opacity: 0.5,
            filter: 'brightness(0.1)',
          },
          {
            transform: 'scale(0.3)',
            opacity: 0.2,
            filter: 'brightness(0.05)',
          },
          {
            transform: 'scale(0)',
            opacity: 0,
            filter: 'brightness(0)',
          },
        ],
        {
          duration: 6500,
          easing: 'cubic-bezier(0.25, 0.1, 0.25, 1)',
        }
      );

      // 5. PARTÍCULAS CON SPAGHETTIFICATION - Estiramiento por fuerzas de marea
      for (let i = 0; i < 15; i++) {
        const particle = document.createElement('div');
        const angle = (i / 15) * Math.PI * 2;
        const startDistance = 100 + Math.random() * 50;
        const startX = Math.cos(angle) * startDistance;
        const startY = Math.sin(angle) * startDistance;

        particle.style.cssText = `
          position: absolute;
          width: 3px;
          height: 3px;
          left: ${120 + startX}px;
          top: ${120 + startY}px;
          background: rgba(255, ${140 + Math.random() * 60}, 30, ${0.7 + Math.random() * 0.3});
          border-radius: 50%;
          filter: blur(0.5px);
          box-shadow: 0 0 8px currentColor;
        `;

        blackHoleContainer.appendChild(particle);

        // Crear trayectoria en espiral con estiramiento (spaghettification)
        const spiralSteps = [];
        const totalSteps = 30;

        for (let step = 0; step <= totalSteps; step++) {
          const progress = step / totalSteps;
          const spiralAngle = angle + progress * Math.PI * 6;
          const distance = startDistance * (1 - progress * 0.95);
          const x = Math.cos(spiralAngle) * distance;
          const y = Math.sin(spiralAngle) * distance;

          // Efecto de redshift - cambio hacia el rojo
          const redShift = progress * 0.8;
          const blueShift = 1 - redShift;

          // Estiramiento por fuerzas de marea
          const stretch = 1 + progress * 3;
          const compression = 1 - progress * 0.7;

          spiralSteps.push({
            transform: `translate(${-startX + x}px, ${-startY + y}px) scale(${compression}, ${stretch}) rotate(${(spiralAngle * 180) / Math.PI}deg)`,
            opacity: (1 - progress) * (0.7 + Math.random() * 0.3),
            filter: `blur(${0.5 + progress * 3}px) hue-rotate(${progress * 60}deg)`,
            background: `rgba(${255 * (1 - redShift * 0.3)}, ${140 * blueShift}, 30, ${0.7 - progress * 0.4})`,
          });
        }

        particle.animate(spiralSteps, {
          duration: 5000 + Math.random() * 1500,
          easing: 'cubic-bezier(0.25, 0.1, 0.25, 1)',
          delay: Math.random() * 800,
        });
      }

      // 6. LENTE GRAVITACIONAL - Distorsión del espacio-tiempo
      const gravitationalLens = document.createElement('div');
      gravitationalLens.style.cssText = `
        position: absolute;
        width: 160px;
        height: 160px;
        top: 40px;
        left: 40px;
        background: radial-gradient(ellipse 80% 40% at center,
          transparent 0%,
          rgba(139, 69, 19, 0.1) 40%,
          rgba(160, 82, 45, 0.2) 60%,
          transparent 80%);
        border-radius: 50%;
        filter: blur(4px);
        backdrop-filter: blur(2px) brightness(1.2);
        animation: lensDistortion 6s ease-in-out;
      `;

      blackHoleContainer.appendChild(gravitationalLens);

      document.body.appendChild(blackHoleContainer);

      // Crear un fade-out suave final para todo el contenedor
      setTimeout(() => {
        blackHoleContainer
          .animate(
            [
              { opacity: 1, filter: 'blur(0px)' },
              { opacity: 0.7, filter: 'blur(1px)' },
              { opacity: 0.3, filter: 'blur(2px)' },
              { opacity: 0, filter: 'blur(4px)' },
            ],
            {
              duration: 1500,
              easing: 'cubic-bezier(0.25, 0.1, 0.25, 1)',
              fill: 'forwards',
            }
          )
          .addEventListener('finish', () => {
            blackHoleContainer.remove();
          });
      }, 6000);

      // Vibración háptica dramática
      if ('vibrate' in navigator) {
        navigator.vibrate([200, 100, 300, 150, 400, 200, 500]);
      }
    }

    distortStarField(): void {
      // Disparar evento para distorsionar las estrellas
      console.log('🎆 Dispatching starFieldDistort event');
      const distortEvent = new CustomEvent('starFieldDistort');
      window.dispatchEvent(distortEvent);
    }

    navigateToHome(): void {
      // Efecto de transición antes de navegar
      this.element.style.transform = 'scale(0.8)';
      this.element.style.transition = 'transform 0.2s ease';

      setTimeout(() => {
        window.location.href = '/';
      }, 200);
    }
  }

  document.addEventListener('DOMContentLoaded', () => {
    document.querySelectorAll('.animated-logo').forEach((logo) => {
      new CrystalLogoComponent(logo as HTMLElement);
    });
  });
</script>
